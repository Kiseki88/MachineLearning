{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN76+bL8NNkLjCXVXMwieIe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kiseki88/MachineLearning/blob/main/Llama3.2%20Prototype%20Inference%20For%20Category%20Sorting\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import userdata\n",
        "api_key = userdata.get('HF_API_KEY')"
      ],
      "metadata": {
        "id": "IMA-JY4JWtDV"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ubm4rtckWdDs",
        "outputId": "649016f9-71b9-42dd-889d-b07cdcecd012"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LLM Response for 'Katrina Miller': Matches:\n",
            "1. Category: TH_NID_Card | DataType: TH_Name\n",
            "2. Category: TH_Bank_Passbook | DataType: TH_Name\n",
            "3. Category: TH_House_Registration | DataType: TH_Name\n",
            "LLM Response for '12/03/2083': Matches:\n",
            "1. Category: TH_NID_Card | DataType: TH_Day\n",
            "2. Category: TH_NID_Card | DataType: TH_DATE \n",
            "3. Category: TH_NID_Card | DataType: EN_DATE\n",
            "LLM Response for '123 Main Street': To determine the matching categories and data types for the given entry \"123 Main Street\", we'll go through each combination and check if the entry matches the data type.\n",
            "\n",
            "Here are the matches:\n",
            "\n",
            "Matches:\n",
            "1. Category: TH_NID_Card | DataType: TH_Address\n",
            "LLM Response for 'multisomatoform disorder': Matches:\n",
            "1. Category: TH_NID_Card | DataType: TH_Labels\n",
            "\n",
            "Note: The entry \"multisomatoform disorder\" seems more like a keyword or a label related to the medical field, which is why it matches the category TH_NID_Card and data type TH_Labels.\n",
            "LLM Response for 'InvoiceNumber': Matches:\n",
            "1. Category: TH_Bill_Invoice | DataType: TH_Bill_Number\n",
            "                       Data               Category        DataType\n",
            "0            Katrina Miller            TH_NID_Card         TH_Name\n",
            "1            Katrina Miller       TH_Bank_Passbook         TH_Name\n",
            "2            Katrina Miller  TH_House_Registration         TH_Name\n",
            "3                12/03/2083            TH_NID_Card          TH_Day\n",
            "4                12/03/2083            TH_NID_Card         TH_DATE\n",
            "5                12/03/2083            TH_NID_Card         EN_DATE\n",
            "6           123 Main Street            TH_NID_Card      TH_Address\n",
            "7  multisomatoform disorder            TH_NID_Card       TH_Labels\n",
            "8             InvoiceNumber        TH_Bill_Invoice  TH_Bill_Number\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from huggingface_hub import InferenceClient\n",
        "from google.colab import userdata\n",
        "\n",
        "# Initialize the client using the API key stored as 'APIKEY'\n",
        "api_key = userdata.get('HF_API_KEY')\n",
        "client = InferenceClient(api_key=api_key)\n",
        "\n",
        "# Load data from a .txt file (one data point per line)\n",
        "input_file = \"data.txt\"  # Replace with your file's path\n",
        "with open(input_file, \"r\") as f:\n",
        "    data = [line.strip() for line in f if line.strip()]  # Remove empty lines\n",
        "\n",
        "# Define categories and data types\n",
        "categories = {\n",
        "    \"TH_NID_Card\": [\"TH_Name\",\"TH_Address\", \"TH_Document_Keywords\", \"TH_NID_Keywords\", \"TH_DATE\", \"EN_DATE\"],\n",
        "    \"TH_Bank_Passbook\": [\"TH_Name\", \"TH_Account\", \"TH_Balance\", \"TH_Bank_Keywords\"],\n",
        "    \"TH_House_Registration\": [\"TH_Name\", \"TH_House_Number\", \"TH_Resident_List\"],\n",
        "    \"TH_Bill_Invoice\": [\"TH_Bill_Number\", \"TH_Date\", \"TH_Amount\", \"TH_Keywords\"],\n",
        "    \"EN_Bill_Invoice\": [\"EN_Bill_Number\", \"EN_Date\", \"EN_Amount\", \"EN_Keywords\"]\n",
        "}\n",
        "\n",
        "# Prepare results list\n",
        "results = []\n",
        "\n",
        "# Iterate through each data entry\n",
        "for entry in data:\n",
        "    # Generate all possible combinations of categories and data types\n",
        "    possible_combinations = [\n",
        "        {\"Category\": category, \"DataType\": dtype}\n",
        "        for category, dtypes in categories.items()\n",
        "        for dtype in dtypes\n",
        "    ]\n",
        "\n",
        "    # Prepare prompt for the model\n",
        "    prompt = f\"\"\"\n",
        "    You are an assistant verifying which categories and data types are relevant for a given entry.\n",
        "    The entry will be compared against all possible combinations of categories and data types provided.\n",
        "    For each combination, verify if the entry matches the category and data type.\n",
        "\n",
        "    Entry: \"{entry}\"\n",
        "    Possible Combinations: {possible_combinations}\n",
        "\n",
        "    Respond in this exact format:\n",
        "    Matches:\n",
        "    1. Category: <Category> | DataType: <DataType> (if relevant)\n",
        "    2. Category: <Category> | DataType: <DataType> (if relevant)\n",
        "    ...\n",
        "    \"\"\"\n",
        "\n",
        "    # Call the Llama 3.2 model\n",
        "    messages = [{\"role\": \"user\", \"content\": prompt}]\n",
        "    completion = client.chat.completions.create(\n",
        "        model=\"meta-llama/Llama-3.2-11B-Vision-Instruct\",\n",
        "        messages=messages,\n",
        "        max_tokens=250\n",
        "    )\n",
        "\n",
        "    # Extract the response\n",
        "    response = completion.choices[0].message[\"content\"].strip()\n",
        "    print(f\"LLM Response for '{entry}': {response}\")  # Debugging: Print raw LLM response\n",
        "\n",
        "    # Parse the response to extract multiple matches\n",
        "    matches = []\n",
        "    try:\n",
        "        if \"Matches:\" in response:\n",
        "            lines = response.split(\"Matches:\")[1].strip().split(\"\\n\")\n",
        "            for line in lines:\n",
        "                if \"|\" in line:\n",
        "                    category = line.split(\"Category:\")[1].split(\"|\")[0].strip()\n",
        "                    datatype = line.split(\"DataType:\")[1].strip()\n",
        "\n",
        "                    # Validate the category and data type\n",
        "                    if category in categories and datatype in categories[category]:\n",
        "                        matches.append({\"Category\": category, \"DataType\": datatype})\n",
        "    except Exception as e:\n",
        "        print(f\"Error parsing response for '{entry}': {e}\")\n",
        "\n",
        "    # Append the result with all matches\n",
        "    results.append({\"Data\": entry, \"Matches\": matches})\n",
        "\n",
        "# Convert results to a pandas DataFrame for better readability\n",
        "flat_results = []\n",
        "for result in results:\n",
        "    data_entry = result[\"Data\"]\n",
        "    for match in result[\"Matches\"]:\n",
        "        flat_results.append({\"Data\": data_entry, \"Category\": match[\"Category\"], \"DataType\": match[\"DataType\"]})\n",
        "\n",
        "df = pd.DataFrame(flat_results)\n",
        "\n",
        "# Save to a CSV file (optional)\n",
        "output_file = \"categorized_data_all_combinations.csv\"\n",
        "df.to_csv(output_file, index=False)\n",
        "\n",
        "# Display the DataFrame\n",
        "print(df)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "gMTyqqRar3Pn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "9ci4YL-WW2uu",
        "outputId": "08f98f3d-d234-49df-9817-5a1e88e3dc2c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       Data               Category        DataType\n",
              "0            Katrina Miller            TH_NID_Card         TH_Name\n",
              "1            Katrina Miller       TH_Bank_Passbook         TH_Name\n",
              "2            Katrina Miller  TH_House_Registration         TH_Name\n",
              "3                12/03/2083            TH_NID_Card          TH_Day\n",
              "4                12/03/2083            TH_NID_Card         TH_DATE\n",
              "5                12/03/2083            TH_NID_Card         EN_DATE\n",
              "6           123 Main Street            TH_NID_Card      TH_Address\n",
              "7  multisomatoform disorder            TH_NID_Card       TH_Labels\n",
              "8             InvoiceNumber        TH_Bill_Invoice  TH_Bill_Number"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-651680d8-e125-4f93-bb71-22d976bf2fb6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Data</th>\n",
              "      <th>Category</th>\n",
              "      <th>DataType</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Katrina Miller</td>\n",
              "      <td>TH_NID_Card</td>\n",
              "      <td>TH_Name</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Katrina Miller</td>\n",
              "      <td>TH_Bank_Passbook</td>\n",
              "      <td>TH_Name</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Katrina Miller</td>\n",
              "      <td>TH_House_Registration</td>\n",
              "      <td>TH_Name</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12/03/2083</td>\n",
              "      <td>TH_NID_Card</td>\n",
              "      <td>TH_Day</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12/03/2083</td>\n",
              "      <td>TH_NID_Card</td>\n",
              "      <td>TH_DATE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>12/03/2083</td>\n",
              "      <td>TH_NID_Card</td>\n",
              "      <td>EN_DATE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>123 Main Street</td>\n",
              "      <td>TH_NID_Card</td>\n",
              "      <td>TH_Address</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>multisomatoform disorder</td>\n",
              "      <td>TH_NID_Card</td>\n",
              "      <td>TH_Labels</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>InvoiceNumber</td>\n",
              "      <td>TH_Bill_Invoice</td>\n",
              "      <td>TH_Bill_Number</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-651680d8-e125-4f93-bb71-22d976bf2fb6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-651680d8-e125-4f93-bb71-22d976bf2fb6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-651680d8-e125-4f93-bb71-22d976bf2fb6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d3dbd657-fc41-40d9-b913-803200b85abe\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d3dbd657-fc41-40d9-b913-803200b85abe')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d3dbd657-fc41-40d9-b913-803200b85abe button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b65d11ee-c1c1-4e3c-871a-96c677e4cd6c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b65d11ee-c1c1-4e3c-871a-96c677e4cd6c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"Data\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"12/03/2083\",\n          \"InvoiceNumber\",\n          \"123 Main Street\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"TH_Bank_Passbook\",\n          \"TH_Bill_Invoice\",\n          \"TH_NID_Card\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DataType\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"TH_Name\",\n          \"TH_Day\",\n          \"TH_Labels\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5C6AOsKrqjpK"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}